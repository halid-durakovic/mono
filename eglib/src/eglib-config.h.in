
#ifndef __EGLIB_SRC_EGLIB_CONFIG_H__
#define __EGLIB_SRC_EGLIB_CONFIG_H__

/*
 * System-dependent settings
 */
#define G_GNUC_PRETTY_FUNCTION   @GNUC_PRETTY@
#define G_GNUC_UNUSED            @GNUC_UNUSED@
#define G_BYTE_ORDER             @ORDER@
#define G_GNUC_NORETURN          @GNUC_NORETURN@
#define G_SEARCHPATH_SEPARATOR_S "@SEARCHSEP@"
#define G_SEARCHPATH_SEPARATOR   '@SEARCHSEP@'
#define G_DIR_SEPARATOR          '@PATHSEP@'
#define G_DIR_SEPARATOR_S        "@PATHSEP@"
#define G_BREAKPOINT()           @BREAKPOINT@
#define G_OS_@OS@

#if @HAVE_ALLOCA_H@ == 1
#define G_HAVE_ALLOCA_H
#endif

#if defined(HOST_WATCHOS)
#undef G_BREAKPOINT
#define G_BREAKPOINT()
#endif

typedef @PIDTYPE@ GPid;

#if @SIZEOF_VOID_P@ == @SIZEOF_INT@
#define GPOINTER_TO_INT(ptr) ((gint) (ptr))
#define GPOINTER_TO_UINT(ptr) ((guint) (ptr))
#define GINT_TO_POINTER(v) ((gpointer) (v))
#define GUINT_TO_POINTER(v) ((gpointer) (v))
#define GSIZE int
#define G_GSIZE_FORMAT "u"

#elif @SIZEOF_VOID_P@ == @SIZEOF_LONG@
#define GPOINTER_TO_INT(ptr) ((gint)(long) (ptr))
#define GPOINTER_TO_UINT(ptr) ((guint)(long) (ptr))
#define GINT_TO_POINTER(v) ((gpointer)(glong) (v))
#define GUINT_TO_POINTER(v) ((gpointer)(gulong) (v))
#define GSIZE long
#define G_GSIZE_FORMAT "lu"

#elif @SIZEOF_VOID_P@ == @SIZEOF_LONG_LONG@
#define GPOINTER_TO_INT(ptr) ((gint)(long long) (ptr))
#define GPOINTER_TO_UINT(ptr) ((guint)(unsigned long long) (ptr))
#define GINT_TO_POINTER(v) ((gpointer)(long long) (v))
#define GUINT_TO_POINTER(v) ((gpointer)(unsigned long long) (v))
#define GSIZE long long
#define G_GSIZE_FORMAT "I64u"

#else
#error "unsupported pointer size"
#endif

typedef unsigned GSIZE gsize;
typedef signed   GSIZE gssize;

#endif /* __EGLIB_SRC_EGLIB_CONFIG_H__ */
